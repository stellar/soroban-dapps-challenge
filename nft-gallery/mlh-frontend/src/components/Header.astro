---
import Mint from '../components/Mint.astro';
---

<div id="header-wrap" aria-live="polite">
  <div class="header-row">
    <h1 class="header-row__title">Explore the new capabilites of stellar with the soroban smart contract platform</h1>
    <div class="header-row__buttons">
      <button id="button-address"></button>
      <button id="button-connect">Connect</button>
    </div>
  </div>

  <div class="header-row">
    <div class="header-row__info">
      <b><em>Million lumen homepage</em> - Stellar Community</b><br />
      <small>Pixel art - 4096 NFTs of 256px - futurenet</small>
    </div>
    <Mint />
  </div>
</div>


<style>
  #header-wrap {
    margin-bottom: 50px;
  }

  .header-row__title {
    font-size: larger;
    margin: 0;
  }

  .header-row {
    display: flex;
    justify-content: space-between;
    position: relative;
    margin-top: 30px;
  }

  .header-row__buttons {
    display: flex;
    gap: 10px;
  }

  button#button-connect {
    font-size: 1rem;
    border-radius: 10px;
    padding: 10px;
    text-align: center;
    height: fit-content;
    
    color: white;
    background-color: black;
    box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.25) inset, 0 5px 10px 5px rgba(0, 0, 0, 0.25);
    transition: width 0.1s linear;

    cursor: pointer;
  }
 
  button#button-address {
    display: none;
    font-size: 1rem;
    border-radius: 10px;
    padding: 10px;
    text-align: center;
    height: fit-content;
    
    color: white;
    background-color: rgb(54, 44, 44);
    box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.25) inset, 0 5px 10px 5px rgba(0, 0, 0, 0.25);
    transition: width 0.1s linear;

    cursor: pointer;
  }

  .header-row__info {
    padding: 1em;
    font-size: 1rem;
    border-radius: 1rem;
    
    background-color: black;
    color: white;
    box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.25) inset, 0 5px 10px 5px rgba(0, 0, 0, 0.25);
  }
</style>

<script>
  import {
    StellarWalletsKit,
    WalletNetwork,
    WalletType,
    ISupportedWallet,
  } from "stellar-wallets-kit";

  import {publicKey} from '../keyStore';

  const FUTURENET_DETAILS = {
    network: "FUTURENET",
    networkUrl: "https://horizon-futurenet.stellar.org",
    networkPassphrase: "Test SDF Future Network ; October 2022",
  };

  const ERRORS = {
    WALLET_CONNECTION_REJECTED: "Wallet connection rejected",
  };

  const STORAGE_WALLET_KEY = "wallet";

  const allowedWallets = [
    WalletType.ALBEDO,
    WalletType.FREIGHTER,
    WalletType.XBULL,
  ];
  const SWKKit = new StellarWalletsKit({
    network: FUTURENET_DETAILS.networkPassphrase as WalletNetwork,
    selectedWallet: WalletType.FREIGHTER,
  })
  SWKKit.setNetwork(FUTURENET_DETAILS.networkPassphrase as WalletNetwork);

  const buttonAddress = document.getElementById('button-address');
  const buttonConnect = document.getElementById('button-connect');

  const storedWallet = localStorage.getItem(STORAGE_WALLET_KEY)

  if (storedWallet) {
    (async () => {
      SWKKit.setWallet(storedWallet);
      const walletAddress = await SWKKit.getPublicKey();
      // Set selected wallet, network, and public key
      await SWKKit.setNetwork(WalletNetwork.FUTURENET);
      
      publicKey.set(walletAddress)
    })()
  }

  if (buttonConnect) {
    const onConnectHandler = async () => {
      if (publicKey.get()) {
        publicKey.set(undefined);
        localStorage.removeItem(STORAGE_WALLET_KEY);
      } else {
        await SWKKit.openModal({
          allowedWallets,
          onWalletSelected: async (option: ISupportedWallet) => {
            try {
              SWKKit.setWallet(option.type);
              const walletAddress = await SWKKit.getPublicKey();
              // Set selected wallet, network, and public key
              await SWKKit.setNetwork(WalletNetwork.FUTURENET);
              
              publicKey.set(walletAddress)
              localStorage.setItem(STORAGE_WALLET_KEY, option.type);
            } catch (error) {
              localStorage.removeItem(STORAGE_WALLET_KEY);
              console.error(ERRORS.WALLET_CONNECTION_REJECTED)
            }
          },
        });
      }
    }
    buttonConnect.addEventListener('click', onConnectHandler)
  }

  publicKey.subscribe(value => {
    if (buttonAddress) {
      buttonAddress.innerHTML = value ? (value as string).substring(0, 4) + "..." + (value as string).substring(52) : '';
      buttonAddress.style.display = value ? "block" : 'none';

      if (buttonConnect) {
        buttonConnect.innerText = value ? "Disconnect" : 'Connect'
      }
    }
  })

  if (buttonAddress) {
    buttonAddress.addEventListener('click', () => {
      navigator.clipboard.writeText(publicKey.get() || '');
    })
  }
</script>
