
<button id="mint">Mint</button>
<div id="errormint"></div>

<style>
  button#mint {
    position: absolute;
    bottom: 0;
    right: 0;
    height: 50px;
    width: 230px;
    font-size: 24px;
    border-radius: 10px;
    text-align: center;

    color: white;
    background-color: black;
    box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.25) inset, 0 5px 10px 5px rgba(0, 0, 0, 0.25);
    cursor: pointer;
  }

  #errormint {
    color: rgb(185, 18, 18);
  }
</style>

<script>
  import * as client from 'Million';
  import {xdr} from 'soroban-client';
  import { publicKey } from '../keyStore';

  const FakeWallet = {
    isConnected: function () {
      return false;
    },
  };

  const mintButton = document.getElementById("mint");
  const errorElement = document.getElementById("errormint")

  if (mintButton && errorElement) {
    const onMintHandler = async () => {
      const to = publicKey.get()
      
      try {
        console.log('WALLET_ADDRESS', to)
        console.log('CONTRACT_ID', client.CONTRACT_ID)

        errorElement.innerHTML = '';
        let retry = 3;
        while (retry > 0) {
          retry--;
          let x = Math.floor(Math.random() * 128);
          let y = Math.floor(Math.random() * 32);
          let result = await client.mint({to, x: x, y: y}, {fee: 500000, responseType: "full", wallet: FakeWallet});

          console.log('RESULT', result)
          
          if (result.status == "SUCCESS") {
            let rvalue = xdr.TransactionMeta.fromXDR(result.resultMetaXdr, 'base64').v3().sorobanMeta().returnValue().u32();
            let result2 = await client.tokenUri({token_id: rvalue}, {responseType: "simulated", fee: 100000, wallet: FakeWallet});
            if (result2.results[0].xdr) {
              let xdrUri = result2.results[0].xdr;
              let uri = xdr.ScVal.fromXDR(xdrUri, 'base64').str().toString()
              let jsonResponse = await fetch(uri);
              let jsonData = await jsonResponse.json();

              console.log('URI',uri)
              window.location = jsonData.home_page;
            }
          }
          console.log("Error", result);
        }
        if (retry == 0) {
          errorElement.innerHTML = 'Mint error';
        }
      } catch (e) {
        console.error(e)
        errorElement.innerHTML = e as string;
      }
    }

    publicKey.subscribe(value => {
      mintButton.style.display = value ? 'block' : 'none'
      errorElement.innerHTML = '';
    })

    mintButton.addEventListener('click', onMintHandler)

    mintButton.addEventListener('mouseover', () =>  {
      mintButton.innerHTML = '256XLM â‡‹ 256px';
    })

    mintButton.addEventListener('mouseleave', () =>  {
      mintButton.innerHTML = 'Mint';
    })
  }
</script>
